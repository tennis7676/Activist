{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 名寄せマスターの作成\n",
    "- 保有者名、銘柄コード、浮動株フラグのマスターを作成する。\n",
    "- 大株主は浮動の場合もあれば固定の場合もある。自己株式、役員の保有、政策保有株は必ず固定株式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import datetime\n",
    "from dateutil.relativedelta import relativedelta\n",
    "import shutil\n",
    "import mojimoji\n",
    "import math\n",
    "import glob\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyodbc\n",
    "settings_pyodbc = {\"DRIVER\":\"{Oracle in OraClient12Home1}\", \n",
    "                    \"SERVER\":\"E03H.WORLD\", \n",
    "                    \"DBQ\":\"E03H\", \n",
    "                    \"UID\":\"DAZ91001\", \n",
    "                    \"PWD\":\"617030\"}\n",
    "#sqlの呼び出し関数\n",
    "def sql(query):\n",
    "    cnxn = pyodbc.connect(**settings_pyodbc)\n",
    "    return pd.read_sql(query, cnxn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 100)\n",
    "pd.set_option('display.max_rows', 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "today = int(datetime.date.today().strftime('%Y%m%d'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "todaym1 = (datetime.date.today() - relativedelta(years=1)).strftime('%Y%m%d')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 読込"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#今日からから24個前のものを取る\n",
    "#yyyymm\n",
    "period_end = today//100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_month_list():\n",
    "    period_end_date = datetime.date(period_end//10**2, period_end%(10**2), 1)\n",
    "    month_list = []\n",
    "    for d in range(24):\n",
    "        month = period_end_date - relativedelta(months=d)\n",
    "        month_list.append(month.strftime('%Y%m'))\n",
    "    return month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "month_list = make_month_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_input = pd.DataFrame()\n",
    "for m in month_list:\n",
    "    path_yuho = r\"S:\\B910\\商品一課\\TOPIXFFW予想\\有価証券報告書抽出後データ\\有価証券報告書{}.xlsx\".format(m)\n",
    "    if os.path.isfile(path_yuho):\n",
    "        df_input_ = pd.read_excel(path_yuho)\n",
    "        df_input = pd.concat([df_input, df_input_])\n",
    "df_input = df_input.astype({'CODE':int}).astype({'CODE':str, 'HOLDER_NAME':str}) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#データ区分ごとに分ける\n",
    "df_ookabunusi = df_input[df_input['DATA_KBN']==1].copy()\n",
    "df_jikokabu = df_input[df_input['DATA_KBN']==2].copy()\n",
    "df_yakuin = df_input[df_input['DATA_KBN']==3].copy()\n",
    "df_seisaku = df_input[df_input['DATA_KBN']==4].copy()\n",
    "df_hakkouzumi = df_input[df_input['DATA_KBN']==5].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RENBAN</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>F_DATE</th>\n",
       "      <th>CODE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>DATA_KBN</th>\n",
       "      <th>HOLDER_NAME</th>\n",
       "      <th>SUB_HOLDER_NAME</th>\n",
       "      <th>SHARES</th>\n",
       "      <th>SHARES_PRIOR1YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [RENBAN, PERIOD, F_DATE, CODE, NAME, DATA_KBN, HOLDER_NAME, SUB_HOLDER_NAME, SHARES, SHARES_PRIOR1YEAR]\n",
       "Index: []"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_input[df_input['NAME'].isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# データチェック"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3986\n"
     ]
    }
   ],
   "source": [
    "print(len(df_input['CODE'].unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RENBAN</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>F_DATE</th>\n",
       "      <th>CODE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>DATA_KBN</th>\n",
       "      <th>HOLDER_NAME</th>\n",
       "      <th>SUB_HOLDER_NAME</th>\n",
       "      <th>SHARES</th>\n",
       "      <th>SHARES_PRIOR1YEAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [RENBAN, PERIOD, F_DATE, CODE, NAME, DATA_KBN, HOLDER_NAME, SUB_HOLDER_NAME, SHARES, SHARES_PRIOR1YEAR]\n",
       "Index: []"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#上場廃止している銘柄はCODEがない、てかバグかな\n",
    "df_input[df_input['CODE'].isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 有報自体は存在しているのに特定のデータが読み込めていない場合をチェック"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "set_input = set(df_input['CODE'].unique())\n",
    "set_ookabunusi = set(df_ookabunusi['CODE'].unique())\n",
    "set_jikokabu = set(df_jikokabu['CODE'].unique())\n",
    "set_yakuin = set(df_yakuin['CODE'].unique())\n",
    "set_seisaku = set(df_seisaku['CODE'].unique())\n",
    "set_hakkouzumi = set(df_hakkouzumi['CODE'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'33290', '35360', '45960'}"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set_input  - set_ookabunusi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set_input - set_jikokabu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set_input - set_yakuin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set_input - set_hakkouzumi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "#株数がNULLの行を0埋めする\n",
    "df_input['SHARES'] = df_input['SHARES'].fillna(0)\n",
    "#役員と政策保有株は保有株が０でも行が存在するので削除する\n",
    "df_input = df_input[~((df_input['SHARES'] ==0) & (df_input['DATA_KBN'].isin([3,4])))].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 政策保有株式以外はTOPIX銘柄のみにする"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#TOPIX採用銘柄以外の銘柄に関しては大株主、自己株式、役員は関係ないので抜く。政策保有株は全上場銘柄が必要。\n",
    "def sql_topix_code():\n",
    "    query = f'''\n",
    "SELECT\n",
    "    CODE\n",
    "FROM\n",
    "    PT2.V_MD_EQ_BASE_TOPIX_S\n",
    "WHERE\n",
    "    D_DATE = '{today}' and\n",
    "    SIZE2 <= 7\n",
    "ORDER BY\n",
    "    CODE\n",
    "    '''\n",
    "    return sql(query)\n",
    "list_topix_code = sql_topix_code()['CODE'].values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_input1 = df_input[(df_input['DATA_KBN'].isin([1,2,3]) & df_input['CODE'].isin(list_topix_code)) | df_input['DATA_KBN'].isin([4])].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3136"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_input1['CODE'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# マスターを作成するために名寄せをする"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "#マスターと結合するための名寄せ\n",
    "def func_nayose(df, colum):\n",
    "    #新しく列を作る\n",
    "    df[colum + '_NAYOSE'] = df[colum]\n",
    "    #すべてこの列に作用させる\n",
    "    colum = colum + '_NAYOSE'\n",
    "    #半角を全角にする\n",
    "    df[colum] = df[colum].apply(mojimoji.han_to_zen)\n",
    "    df[colum] = df[colum].str.replace('㈱', '')\n",
    "    df[colum] = df[colum].str.replace('（株）', '')\n",
    "    df[colum] = df[colum].str.replace('株式会社', '')\n",
    "    df[colum] = df[colum].str.replace('㈲', '有限会社')\n",
    "    df[colum] = df[colum].str.replace('（有）', '有限会社')\n",
    "    #英字を大文字にする\n",
    "    df[colum] = df[colum].str.upper()\n",
    "    #かっこ\n",
    "    df[colum] = df[colum].str.replace('（', '')\n",
    "    df[colum] = df[colum].str.replace('）', '')\n",
    "    df[colum] = df[colum].str.replace('［', '')\n",
    "    df[colum] = df[colum].str.replace('］', '')\n",
    "    #セミコロン\n",
    "    df[colum] = df[colum].str.replace('：', '')\n",
    "    #空白削除\n",
    "    df[colum] = df[colum].replace('\\s', '', regex=True)\n",
    "    \n",
    "    #先頭についている場合はその文字のみ消す\n",
    "    df[colum] = df[colum].replace('^注', '', regex=True)\n",
    "    df[colum] = df[colum].replace('^※', '', regex=True)\n",
    "    df[colum] = df[colum].replace('^＊', '', regex=True)\n",
    "    df[colum] = df[colum].replace('^旧', '', regex=True)\n",
    "    #後ろの場合は全部消す\n",
    "    df[colum] = df[colum].replace('注.*', '', regex=True)\n",
    "    df[colum] = df[colum].replace('※.*', '', regex=True)\n",
    "    df[colum] = df[colum].replace('＊.*', '', regex=True)\n",
    "    df[colum] = df[colum].replace('旧.*', '', regex=True)\n",
    "    #文字を消す\n",
    "    df[colum] = df[colum].str.replace('●', '')\n",
    "    df[colum] = df[colum].str.replace('・', '')\n",
    "    df[colum] = df[colum].str.replace('／', '')\n",
    "    df[colum] = df[colum].str.replace('．', '')\n",
    "    df[colum] = df[colum].str.replace('，', '')\n",
    "    df[colum] = df[colum].str.replace('、', '')\n",
    "    df[colum] = df[colum].str.replace('–', '－')\n",
    "    df[colum] = df[colum].str.replace('-', '－')\n",
    "    df[colum] = df[colum].str.replace('ー', '－')\n",
    "    df[colum] = df[colum].str.replace('―', '－')\n",
    "    df[colum] = df[colum].str.replace('‐', '－')\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'\\\\u2013-\\\\u30fc\\\\u2015\\\\u2010\\\\u30fc'"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'–-ー―‐ー'.encode('unicode-escape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'\\\\u2013\\\\uff0d\\\\u30fc\\\\u2015\\\\u2010\\\\uff0d'"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mojimoji.han_to_zen('–-ー―‐-').encode('unicode-escape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_input_nayose = func_nayose(df_input1,'HOLDER_NAME')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DATA_KBNごとのフラグを立てたいので分ける"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ookabunusi = df_input_nayose[df_input_nayose['DATA_KBN']==1].copy().drop_duplicates(subset=['HOLDER_NAME_NAYOSE'])[['HOLDER_NAME_NAYOSE']]\n",
    "df_ookabunusi['OOKABUNUSI_FLG'] = 1\n",
    "df_jikokabu = df_input_nayose[df_input_nayose['DATA_KBN']==2].copy().drop_duplicates(subset=['HOLDER_NAME_NAYOSE'])[['HOLDER_NAME_NAYOSE']]\n",
    "df_jikokabu['JIKOKABU_FLG'] = 1\n",
    "df_yakuin = df_input_nayose[df_input_nayose['DATA_KBN']==3].copy().drop_duplicates(subset=['HOLDER_NAME_NAYOSE'])[['HOLDER_NAME_NAYOSE']]\n",
    "df_yakuin['YAKUIN_FLG'] = 1\n",
    "df_seisaku = df_input_nayose[df_input_nayose['DATA_KBN']==4].copy().drop_duplicates(subset=['HOLDER_NAME_NAYOSE'])[['HOLDER_NAME_NAYOSE']]\n",
    "df_seisaku['SEISAKU_FLG'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_input_nayose_unique = df_input_nayose[['HOLDER_NAME_NAYOSE']].drop_duplicates(subset=['HOLDER_NAME_NAYOSE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_input_nayose_unique1 = pd.merge(df_input_nayose_unique, df_ookabunusi, on='HOLDER_NAME_NAYOSE', how='left')\n",
    "df_input_nayose_unique2 = pd.merge(df_input_nayose_unique1, df_jikokabu, on='HOLDER_NAME_NAYOSE', how='left')\n",
    "df_input_nayose_unique3 = pd.merge(df_input_nayose_unique2, df_yakuin, on='HOLDER_NAME_NAYOSE', how='left')\n",
    "df_input_nayose_unique4 = pd.merge(df_input_nayose_unique3, df_seisaku, on='HOLDER_NAME_NAYOSE', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_input_nayose.to_excel(r\"S:\\B910\\執行業務課\\マクロ倶楽部\\王\\戦略\\TOPIXリバランス\\有価証券報告書データ\\temp_moto.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_input_nayose_unique4[['OOKABUNUSI_FLG', 'JIKOKABU_FLG', 'YAKUIN_FLG', 'SEISAKU_FLG']] = df_input_nayose_unique4[['OOKABUNUSI_FLG', 'JIKOKABU_FLG', 'YAKUIN_FLG', 'SEISAKU_FLG']].fillna(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 名寄せマスターのパス"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "path_master_old = glob.glob(r\"S:\\B910\\商品一課\\TOPIXFFW予想\\マスター\\topix_ffw_master*.xlsx\")[0]\n",
    "path_master_new = r\"S:\\B910\\商品一課\\TOPIXFFW予想\\マスター\\topix_ffw_master{}.xlsx\".format(today)\n",
    "path_master_backup = path_master_old.replace(r\"S:\\B910\\商品一課\\TOPIXFFW予想\\マスター\", r\"S:\\B910\\商品一課\\TOPIXFFW予想\\マスター\\old\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master_old = pd.read_excel(path_master_old)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master_old['IS_MASTER'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_nayose_master = pd.merge(df_input_nayose_unique4, df_master_old[['MASTER_NAME', 'IS_MASTER']], left_on='HOLDER_NAME_NAYOSE', right_on='MASTER_NAME', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_nayose_master_nan = df_nayose_master[df_nayose_master['IS_MASTER'].isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "#名前をキーにして銘柄コードを取得する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1年前の銘柄名も欲しい"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sql_name_db():\n",
    "    query = f'''\n",
    "    select\n",
    "        unique CODE as HOLDER_CODE_DB,\n",
    "        NAME as HOLDER_NAME_DB\n",
    "    from(\n",
    "            select\n",
    "                code,\n",
    "                NAME_MAIN as NAME\n",
    "            from\n",
    "                pt2.V_MT_EQ\n",
    "            where\n",
    "                SHU_SHIJO <> '0' \n",
    "           UNION ALL select\n",
    "                code,\n",
    "                NAME \n",
    "            from\n",
    "                pt2.V_MT_EQ\n",
    "            where\n",
    "                SHU_SHIJO <> '0' \n",
    "\n",
    "            UNION\n",
    "                ALL\n",
    "                select\n",
    "                    code,\n",
    "                    NAME_MAIN as NAME\n",
    "                from\n",
    "                    pt2.V_MT_EQ_S\n",
    "                where\n",
    "                    SHU_SHIJO <> '0' and\n",
    "                    D_DATE = '{todaym1}' \n",
    "            UNION ALL select\n",
    "                code,\n",
    "                NAME \n",
    "            from\n",
    "                pt2.V_MT_EQ_S\n",
    "            where\n",
    "                SHU_SHIJO <> '0' and\n",
    "                D_DATE = '{todaym1}'\n",
    "          )\n",
    "    '''\n",
    "    return sql(query)\n",
    "df_name_db = sql_name_db()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_name_db = func_nayose(df_name_db, 'HOLDER_NAME_DB').drop_duplicates(['HOLDER_CODE_DB', 'HOLDER_NAME_DB_NAYOSE']).copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "#(4760, 3434) (7111, 3390)が同じ名前で存在しているので消す\n",
    "df_name_db = df_name_db[~df_name_db['HOLDER_CODE_DB'].isin(['34340', '33900'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOLDER_CODE_DB</th>\n",
       "      <th>HOLDER_NAME_DB</th>\n",
       "      <th>HOLDER_NAME_DB_NAYOSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [HOLDER_CODE_DB, HOLDER_NAME_DB, HOLDER_NAME_DB_NAYOSE]\n",
       "Index: []"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_name_db[(df_name_db.duplicated('HOLDER_NAME_DB_NAYOSE', keep=False))].sort_values('HOLDER_NAME_DB_NAYOSE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_nayose_master_nan1 = pd.merge(df_nayose_master_nan, df_name_db, left_on='HOLDER_NAME_NAYOSE', right_on='HOLDER_NAME_DB_NAYOSE', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RENBAN</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>F_DATE</th>\n",
       "      <th>CODE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>DATA_KBN</th>\n",
       "      <th>HOLDER_NAME</th>\n",
       "      <th>SUB_HOLDER_NAME</th>\n",
       "      <th>SHARES</th>\n",
       "      <th>SHARES_PRIOR1YEAR</th>\n",
       "      <th>HOLDER_NAME_NAYOSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [RENBAN, PERIOD, F_DATE, CODE, NAME, DATA_KBN, HOLDER_NAME, SUB_HOLDER_NAME, SHARES, SHARES_PRIOR1YEAR, HOLDER_NAME_NAYOSE]\n",
       "Index: []"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#名寄せした後のHOLDER_NAMENAYOが空になっているか確認\n",
    "df_input_nayose[df_input_nayose['HOLDER_NAME_NAYOSE']==\"\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_nayose_master_nan1['FFW_FLG'] = None\n",
    "df_nayose_master_nan1['GROUP'] = None\n",
    "df_nayose_master_nan1['MEMO'] = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_nayose_master_nan2 = df_nayose_master_nan1[['HOLDER_NAME_NAYOSE', 'OOKABUNUSI_FLG', 'JIKOKABU_FLG', 'YAKUIN_FLG', 'SEISAKU_FLG', 'HOLDER_CODE_DB', 'FFW_FLG', 'GROUP', 'MEMO']].copy()#.to_excel(r\"S:\\B910\\商品一課\\TOPIXFFW予想\\マスター\\マスター追加\\topix_ffw_master追加{}.xlsx\".format(today))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOLDER_NAME_NAYOSE</th>\n",
       "      <th>OOKABUNUSI_FLG</th>\n",
       "      <th>JIKOKABU_FLG</th>\n",
       "      <th>YAKUIN_FLG</th>\n",
       "      <th>SEISAKU_FLG</th>\n",
       "      <th>HOLDER_CODE_DB</th>\n",
       "      <th>FFW_FLG</th>\n",
       "      <th>GROUP</th>\n",
       "      <th>MEMO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [HOLDER_NAME_NAYOSE, OOKABUNUSI_FLG, JIKOKABU_FLG, YAKUIN_FLG, SEISAKU_FLG, HOLDER_CODE_DB, FFW_FLG, GROUP, MEMO]\n",
       "Index: []"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nayose_master_nan2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#大株主のみが１のものは固定か浮動か判定する必要があるが他は必ず固定株。\n",
    "#固定株0，浮動株２\n",
    "df_nayose_master_nan2.loc[((df_nayose_master_nan2['JIKOKABU_FLG']==1)|(df_nayose_master_nan2['YAKUIN_FLG']==1)|(df_nayose_master_nan2['SEISAKU_FLG']==1)), 'FFW_FLG'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "#手で記入する必要のある大株主のデータ＝FFW_FLGが未入力のデータと製作保有株の\n",
    "df_nayose_master_nan3 = df_nayose_master_nan2.sort_values(['FFW_FLG', 'SEISAKU_FLG'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "#古いマスターに新しく存在しないものを加えて新規に保存する\n",
    "df_nayose_master_nan4 = df_nayose_master_nan3.rename({'HOLDER_CODE_DB':'MASTER_CODE', 'HOLDER_NAME_NAYOSE':'MASTER_NAME'},axis=1)\n",
    "df_nayose_master_nan4['D_DATE'] = today"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MASTER_NAME</th>\n",
       "      <th>OOKABUNUSI_FLG</th>\n",
       "      <th>JIKOKABU_FLG</th>\n",
       "      <th>YAKUIN_FLG</th>\n",
       "      <th>SEISAKU_FLG</th>\n",
       "      <th>MASTER_CODE</th>\n",
       "      <th>FFW_FLG</th>\n",
       "      <th>GROUP</th>\n",
       "      <th>MEMO</th>\n",
       "      <th>D_DATE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [MASTER_NAME, OOKABUNUSI_FLG, JIKOKABU_FLG, YAKUIN_FLG, SEISAKU_FLG, MASTER_CODE, FFW_FLG, GROUP, MEMO, D_DATE]\n",
       "Index: []"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nayose_master_nan4.loc[(df_nayose_master_nan4['MASTER_CODE'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master_old = df_master_old.drop(['IS_MASTER'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master_new = pd.concat([df_master_old, df_nayose_master_nan4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 古いマスターを別の場所に移動して新しいマスターを保存する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "import shutil\n",
    "if len(df_nayose_master_nan2):\n",
    "    shutil.move(path_master_old, path_master_backup)\n",
    "    df_master_new.to_excel(path_master_new, index=None)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
