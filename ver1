{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 有価証券報告書をダウンロードし、パースした後にエクセルに追加する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- EDINETのAPI1を通じて有価証券報告書のdocIDをlistで取得する\n",
    "- EDINETのAPI2を通じてdocIDの有価証券報告書をzip形式で取得する\n",
    "- zipを解凍してXBRLの形式のファイルを取得する\n",
    "- ファイルは決算期ごとにまとめる\n",
    "- 同時に月ごとのエクセルにも追加する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\2141279\\Anaconda3\\lib\\site-packages\\requests\\__init__.py:91: RequestsDependencyWarning: urllib3 (2.0.7) or chardet (3.0.4) doesn't match a supported version!\n",
      "  RequestsDependencyWarning)\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import os\n",
    "import time\n",
    "import datetime\n",
    "from dateutil.relativedelta import relativedelta\n",
    "from zipfile import ZipFile\n",
    "import pandas as pd\n",
    "from requests.packages.urllib3.exceptions import InsecureRequestWarning\n",
    "requests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n",
    "import glob\n",
    "import numpy as np\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from arelle import ModelManager\n",
    "from arelle import Cntlr\n",
    "from arelle.ModelValue import qname"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyodbc\n",
    "settings_pyodbc = {\"DRIVER\":\"{Oracle in OraClient12Home1}\", \n",
    "                    \"SERVER\":\"E03H.WORLD\", \n",
    "                    \"DBQ\":\"E03H\", \n",
    "                    \"UID\":\"DAZ91001\", \n",
    "                    \"PWD\":\"617030\"}\n",
    "\n",
    "#sqlの呼び出し関数\n",
    "def sql(query):\n",
    "    cnxn = pyodbc.connect(**settings_pyodbc)\n",
    "    return pd.read_sql(query, cnxn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "today = int(datetime.date.today().strftime('%Y%m%d'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#前営業日\n",
    "def sql_todaym1():\n",
    "    query = '''\n",
    "SELECT\n",
    "    D_DATE\n",
    "FROM\n",
    "    PT2.VWO_FN_CALENDAR\n",
    "WHERE\n",
    "    TY_FLG = -1\n",
    "    '''\n",
    "    return sql(query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "todaym1 = int(sql_todaym1().iloc[0,0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "start_date = todaym1\n",
    "end_date = today"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "start_date = 20240201\n",
    "end_date = 20240301"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#書類一覧のAPI\n",
    "url_api1 = r'https://disclosure.edinet-fsa.go.jp/api/v2/documents.json' #date=2022-04-15type=2\n",
    "#書類取得のためのAPI\n",
    "url_api2 = r'https://disclosure.edinet-fsa.go.jp/api/v2/documents/' #S1234567?type=1\n",
    "#ファイルの保存先\n",
    "path_main_xbrl = \"S:\\B910\\商品一課\\TOPIXFFW予想\\有価証券報告書XBRL\"\n",
    "path_main_excel = \"S:\\B910\\商品一課\\TOPIXFFW予想\\有価証券報告書抽出後データ\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#データ区分のフラグ\n",
    "#大株主：１\n",
    "ookabunusi = '1'\n",
    "#自己株式：２\n",
    "jikokabu = '2'\n",
    "#役員：３\n",
    "yakuin = '3'\n",
    "#政策保有株：４\n",
    "seisaku = '4'\n",
    "#発行済み株式数\n",
    "hakkouzumi = '5'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_day_list():\n",
    "    start_date_ = datetime.date(start_date//10**4, start_date%(10**4)//10**2, start_date%10**2)\n",
    "    end_date_ = datetime.date(end_date//10**4, end_date%(10**4)//10**2, end_date%10**2)\n",
    "    period = end_date_ - start_date_\n",
    "    period = int(period.days)\n",
    "    day_list = []\n",
    "    for d in range(period):\n",
    "        day = start_date_ + datetime.timedelta(days=d)\n",
    "        day_list.append(day)\n",
    "    day_list.append(end_date_)\n",
    "    return day_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "day_list = make_day_list()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### API1\n",
    "- 有価証券書報告書であるdocIDをlistとして取得する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#APIキー\n",
    "api_key = '81988957efb6498d9c23028afa4f47f4'\n",
    "proxies = {\n",
    "    'http':  'http://ski-tc-prox1v11.newsnet.jp.daiwacm.com:8080',\n",
    "    'https': 'http://ski-tc-prox1v11.newsnet.jp.daiwacm.com:8080',\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-02-01\n",
      "2024-02-02\n",
      "2024-02-03\n",
      "2024-02-04\n",
      "2024-02-05\n",
      "2024-02-06\n",
      "2024-02-07\n",
      "2024-02-08\n",
      "2024-02-09\n",
      "2024-02-10\n",
      "2024-02-11\n",
      "2024-02-12\n",
      "2024-02-13\n",
      "2024-02-14\n",
      "2024-02-15\n",
      "2024-02-16\n",
      "2024-02-17\n",
      "2024-02-18\n",
      "2024-02-19\n",
      "2024-02-20\n",
      "2024-02-21\n",
      "2024-02-22\n",
      "2024-02-23\n",
      "2024-02-24\n",
      "2024-02-25\n",
      "2024-02-26\n",
      "2024-02-27\n",
      "2024-02-28\n",
      "2024-02-29\n",
      "2024-03-01\n"
     ]
    }
   ],
   "source": [
    "#API1を通じてdocIDを取得\n",
    "#[docID, 銘柄コード, 決算期]\n",
    "list_docID = []\n",
    "for day in day_list:\n",
    "    params1 = {\"date\":day, \"type\": 2, \"Subscription-Key\":api_key}\n",
    "    print(day)\n",
    "    #requestでエラーが起きるので成功するまで続ける\n",
    "    while True:\n",
    "        time.sleep(0.5)\n",
    "        try:\n",
    "            r1 = requests.get(url_api1, params=params1, proxies = proxies).json()\n",
    "            results_list = r1['results']\n",
    "        except:\n",
    "            continue\n",
    "        else:\n",
    "            break\n",
    "    for x in results_list:\n",
    "        #有価証券報告書 & 企業内容等の開示に関する内閣府令 & 第三号様式 & XBRLファイルが存在する & 取り下げられた書類ではない　& 銘柄コードが存在する\n",
    "        if x['docTypeCode']=='120'and x['ordinanceCode']=='010' and x['formCode']=='030000' and x['xbrlFlag']=='1' and x['withdrawalStatus']=='0' and x['secCode'] is not None:\n",
    "            periodEnd_ = str(x['periodEnd'][0:4] + x['periodEnd'][5:7]) \n",
    "            list_docID.append([x['docID'], x['secCode'], periodEnd_])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# API2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set_code = set([x[1] for x in list_docID])\n",
    "len(set_code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func_get_xbrl(doc):\n",
    "    print(doc[0], doc[1])\n",
    "    path_zip =  'temp.zip'\n",
    "    docID = doc[0]\n",
    "    secCode = doc[1]\n",
    "    periodEnd = doc[2]\n",
    "    #解凍後の保存先 決算月ごとに保存するなければ作成する\n",
    "    path_xbrl_month = path_main_xbrl + r'\\{}'.format(periodEnd)\n",
    "    if not os.path.exists(path_xbrl_month):\n",
    "        os.makedirs(path_xbrl_month)\n",
    "    path_xbrl_code = path_xbrl_month + r'\\{}'.format(secCode)\n",
    "    #API2を通じてXBRLファイルを取得\n",
    "    params2 = {\"type\": 1, \"Subscription-Key\":api_key}\n",
    "    #requestでエラーが起きるので成功するまで続ける\n",
    "    while True:\n",
    "        time.sleep(0.5)\n",
    "        try:\n",
    "            r2 = requests.get(url_api2 + docID, params=params2, stream=True, proxies = proxies)\n",
    "            #正常にAPIから取得できた場合\n",
    "            if r2.status_code == 200:\n",
    "                #一時的にzipfileを保存しなきゃいけない\n",
    "                try:\n",
    "                    with open(path_zip, 'wb') as file:\n",
    "                        for chunk in r2.iter_content(chunk_size=1024):\n",
    "                            file.write(chunk)\n",
    "                    #実際にXBRLとして保存する\n",
    "                    with ZipFile(path_zip) as z:\n",
    "                            z.extractall(path_xbrl_code)\n",
    "                except:\n",
    "                    list_error.append(doc)\n",
    "                    break\n",
    "            #リクエストが間違っているorAPIキーが間違っているor取り下げられている場合は取得をやめる\n",
    "            elif r2.status_code in [400, 401,404]:\n",
    "                break\n",
    "        #エラーが起きた場合の処理\n",
    "        except:\n",
    "            #もう一度挑戦\n",
    "            continue\n",
    "        #成功した場合の処理\n",
    "        else:\n",
    "            list_success.append(doc)\n",
    "            break\n",
    "    return path_xbrl_code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func_insert_excel(df, dic):\n",
    "    path_excel_month = path_main_excel + r\"\\有価証券報告書{0}.xlsx\".format(dic['Period'][0:6])\n",
    "    #その決算期のエクセルファイルが既に存在している場合\n",
    "    if os.path.isfile(path_excel_month):\n",
    "        df_yuho = pd.read_excel(path_excel_month, converters={'PERIOD':str, 'F_DATE':str, 'CODE':str, 'NAME':str, 'DATA_KBN':str, 'HOLDER_NAME':str, 'SUB_HOLDER_NAME':str})\n",
    "        #エクセルが存在していてすでに該当月のCODEが存在している場合はinsertしない\n",
    "        if len(df_yuho[df_yuho['CODE'].isin([dic['Code']])])>0:\n",
    "            pass\n",
    "        else:\n",
    "            pd.concat([df_yuho, df]).to_excel(path_excel_month, index=False)\n",
    "    #まだその月が存在していない場合\n",
    "    else:\n",
    "        df.to_excel(path_excel_month, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func_parse_xbrl(path_xbrl_code):\n",
    "    path_xbrl = glob.glob(path_xbrl_code + r\"\\XBRL\\PublicDoc\\*.xbrl\")[0]\n",
    "    #共通項目用\n",
    "    dic_values = {}\n",
    "    #発行済み株式数\n",
    "    IssuedShares = 0\n",
    "    #大株主_普通\n",
    "    dic_MajorShareholderName = {}\n",
    "    dic_MajorShareholderShares = {}\n",
    "    #大株主_議決権ベース。優先株が発行されている企業は別に議決権ベースでの大株主10位を開示しているもし存在していればこっちを優先する。\n",
    "    dic_MajorShareholdersVotingRightsName = {}\n",
    "    dic_MajorShareholdersVotingRightsShares = {}\n",
    "    #自己株式\n",
    "    list_TreasuryName = []\n",
    "    list_TreasuryShares = []\n",
    "    #発行済株式から自己保有株式を取る\n",
    "    TreasuryShares = 0\n",
    "    #発行済株式から相互保有株式を取る\n",
    "    TreasurySharesReciprocal = 0\n",
    "    #役員の保有株式を一時的に保存\n",
    "    dic_AuditorsName = {}\n",
    "    dic_AuditorsShares = {}\n",
    "    #政策保有株\n",
    "    #HDではない会社\n",
    "    list_SpecifiedInvestmentEquityName = []\n",
    "    list_SpecifiedInvestmentEquitySharesCurrentYear = []\n",
    "    list_SpecifiedInvestmentEquitySharesPrior1Year = []\n",
    "    df_SpecifiedInvestmentEquity = pd.DataFrame()\n",
    "    #HDでLagest\n",
    "    NameOfLargestCompany = None\n",
    "    list_SpecifiedInvestmentEquityNameLargest = []\n",
    "    list_SpecifiedInvestmentEquitySharesCurrentYearLargest = []\n",
    "    list_SpecifiedInvestmentEquitySharesPrior1YearLargest = []\n",
    "    df_SpecifiedInvestmentEquityLargest = pd.DataFrame()\n",
    "    #HDでSecond\n",
    "    NameOfSecondCompany = None\n",
    "    list_SpecifiedInvestmentEquityNameSecond = []\n",
    "    list_SpecifiedInvestmentEquitySharesCurrentYearSecond = []\n",
    "    list_SpecifiedInvestmentEquitySharesPrior1YearSecond = []\n",
    "    df_SpecifiedInvestmentEquitySecond = pd.DataFrame()\n",
    "    \n",
    "    ctrl = Cntlr.Cntlr()\n",
    "    model_manager = ModelManager.initialize(ctrl)\n",
    "    model_xbrl = model_manager.load(path_xbrl)\n",
    "    list_temp = []\n",
    "\n",
    "    for fact in model_xbrl.facts:\n",
    "        #銘柄コード\n",
    "        if str(fact.qname) == 'jpdei_cor:SecurityCodeDEI':\n",
    "            dic_values['Code'] = str(fact.value)\n",
    "        #銘柄名\n",
    "        if str(fact.qname) == 'jpdei_cor:FilerNameInJapaneseDEI':\n",
    "            dic_values['Name'] = str(fact.value)\n",
    "        #決算期\n",
    "        if str(fact.qname) == 'jpdei_cor:CurrentPeriodEndDateDEI':\n",
    "            dic_values['Period'] = str(fact.value[0:4] + fact.value[5:7] + '00')\n",
    "        #提出日\n",
    "        if str(fact.qname) == 'jpcrp_cor:FilingDateCoverPage':\n",
    "            dic_values['FillingDate'] = str(fact.value.replace('-', ''))\n",
    "        #発行済み株式数\n",
    "        if (str(fact.qname) in ['jpcrp_cor:NumberOfIssuedSharesAsOfFiscalYearEndIssuedSharesTotalNumberOfSharesEtc', 'jpcrp_cor:NumberOfIssuedSharesIssuedSharesTotalNumberOfSharesEtc'] )  and ('OrdinaryShareMember' in str(fact.contextID)):\n",
    "            IssuedShares = fact.value\n",
    "        #大株主1位~10位まで\n",
    "        if str(fact.qname) == 'jpcrp_cor:NameMajorShareholders' and  'MajorShareholdersMember' in str(fact.contextID):\n",
    "            dic_MajorShareholderName[fact.contextID] = fact.value\n",
    "        if str(fact.qname) == 'jpcrp_cor:NumberOfSharesHeld'  and  'MajorShareholdersMember' in str(fact.contextID):\n",
    "            dic_MajorShareholderShares[fact.contextID] = fact.value\n",
    "        #大株主1位~10位まで。議決権ベース######################################################################################################################################\n",
    "        if str(fact.qname) == 'jpcrp_cor:NameMajorShareholdersVotingRights'  and  'MajorShareholdersVotingRightsMember' in str(fact.contextID):\n",
    "            dic_MajorShareholdersVotingRightsName[fact.contextID] = fact.value\n",
    "        if str(fact.qname) == 'jpcrp_cor:NumberOfVotingRightsHeld'  and  'MajorShareholdersVotingRightsMember' in str(fact.contextID):\n",
    "            #魏稀有権ベースなので株数単位にする\n",
    "            dic_MajorShareholdersVotingRightsShares[fact.contextID] = fact.value + '00'\n",
    "\n",
    "        #自己株式　発行済み株式の完全議決権株式から取る。自己名義の株式が存在する場合はそちらを取る。他人名義は大株主と重複している可能性がある。計の部分が同じティッカーで入っている場合があるので削除\n",
    "        #有報には自己株式等の欄があるのにXBRLではない場合がある。自己株式等がない場合は念のため発行済み株式から自己保有株式をとる\n",
    "        #自己株式等の自己名義株式\n",
    "        if str(fact.qname) == 'jpcrp_cor:NameOfShareholderTreasurySharesEtc' and 'CurrentYearInstant' in str(fact.contextID) and '計'!=fact.value:\n",
    "            list_TreasuryName.append([fact.contextID, fact.value])\n",
    "        if str(fact.qname) == 'jpcrp_cor:NumberOfSharesHeldInOwnNameTreasurySharesEtc'and 'CurrentYearInstant' in str(fact.contextID):\n",
    "            list_TreasuryShares.append([fact.contextID, fact.value])\n",
    "        #発行済株式の自己株式\n",
    "        if (str(fact.qname) == 'jpcrp_cor:NumberOfSharesIssuedSharesVotingRights') and ('OrdinarySharesTreasurySharesSharesWithFullVotingRightsTreasurySharesEtcMember' in str(fact.contextID)):\n",
    "            TreasuryShares = int(fact.value or \"0\")\n",
    "        #発行済株式の相互保有株式\n",
    "        if (str(fact.qname) == 'jpcrp_cor:NumberOfSharesIssuedSharesVotingRights') and ('OrdinarySharesReciprocalHoldingSharesWithFullVotingRightsTreasurySharesEtcMember' in str(fact.contextID)):\n",
    "            TreasurySharesReciprocal = int(fact.value or \"0\")\n",
    "        #役員\n",
    "        if 'jpcrp_cor:NameInformationAboutDirectorsAndCorporateAuditors' in str(fact.qname):\n",
    "            dic_AuditorsName[fact.contextID] = fact.value\n",
    "        if 'jpcrp_cor:NumberOfSharesHeldOrdinarySharesInformationAboutDirectorsAndCorporateAuditors' in str(fact.qname):\n",
    "            dic_AuditorsShares[fact.contextID] = fact.value\n",
    "        #政策保有株 今年度と前年度も。３パターンあるので名前で取ってくる。マージするときにqnameでマージしたいが名前と保有株数で異なるので削除する\n",
    "        #普通の会社\n",
    "        if 'jpcrp_cor:NameOfSecuritiesDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentReportingCompany' == str(fact.qname):\n",
    "            list_SpecifiedInvestmentEquityName.append([str(fact.qname).replace('NameOfSecurities', ''), fact.contextID, fact.value])\n",
    "        if ('jpcrp_cor:NumberOfSharesHeldDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentReportingCompany' == str(fact.qname)) and ('CurrentYear' in str(fact.contextID)):\n",
    "            list_SpecifiedInvestmentEquitySharesCurrentYear.append([str(fact.qname).replace('NumberOfSharesHeld', ''), fact.contextID, fact.value])\n",
    "        if ('jpcrp_cor:NumberOfSharesHeldDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentReportingCompany' == str(fact.qname)) and ('Prior1Year' in str(fact.contextID)):\n",
    "            #mergeするために去年のも今年の名前にする\n",
    "            list_SpecifiedInvestmentEquitySharesPrior1Year.append([str(fact.qname).replace('NumberOfSharesHeld', ''), fact.contextID.replace('Prior1Year', 'CurrentYear'), fact.value])\n",
    "        #HDのLargest\n",
    "        if 'jpcrp_cor:NameOfGroupCompanyHoldingLargestAmountOfInvestmentSharesInGroup' == str(fact.qname):\n",
    "            NameOfLargestCompany = fact.value\n",
    "        if 'jpcrp_cor:NameOfSecuritiesDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentLargestHoldingCompany' == str(fact.qname):\n",
    "            list_SpecifiedInvestmentEquityNameLargest.append([str(fact.qname).replace('NameOfSecurities', ''), fact.contextID, fact.value])\n",
    "        if ('jpcrp_cor:NumberOfSharesHeldDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentLargestHoldingCompany' == str(fact.qname)) and ('CurrentYear' in str(fact.contextID)):\n",
    "            list_SpecifiedInvestmentEquitySharesCurrentYearLargest.append([str(fact.qname).replace('NumberOfSharesHeld', ''), fact.contextID, fact.value])\n",
    "        if ('jpcrp_cor:NumberOfSharesHeldDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentLargestHoldingCompany' == str(fact.qname)) and ('Prior1Year' in str(fact.contextID)):\n",
    "            #mergeするために去年のも今年の名前にする\n",
    "            list_SpecifiedInvestmentEquitySharesPrior1YearLargest.append([str(fact.qname).replace('NumberOfSharesHeld', ''), fact.contextID.replace('Prior1Year', 'CurrentYear'), fact.value])\n",
    "        #HDのSecond\n",
    "        if 'jpcrp_cor:NameOfGroupCompanyHoldingSecondLargestAmountOfInvestmentSharesInGroup' == str(fact.qname):\n",
    "            NameOfSecondCompany = fact.value\n",
    "        if 'jpcrp_cor:NameOfSecuritiesDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentSecondLargestHoldingCompany' == str(fact.qname):\n",
    "            list_SpecifiedInvestmentEquityNameSecond.append([str(fact.qname).replace('NameOfSecurities', ''), fact.contextID, fact.value])\n",
    "        if ('jpcrp_cor:NumberOfSharesHeldDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentSecondLargestHoldingCompany' == str(fact.qname)) and ('CurrentYear' in str(fact.contextID)):\n",
    "            list_SpecifiedInvestmentEquitySharesCurrentYearSecond.append([str(fact.qname).replace('NumberOfSharesHeld', ''), fact.contextID, fact.value])\n",
    "        if ('jpcrp_cor:NumberOfSharesHeldDetailsOfSpecifiedInvestmentEquitySecuritiesHeldForPurposesOtherThanPureInvestmentSecondLargestHoldingCompany' == str(fact.qname)) and ('Prior1Year' in str(fact.contextID)):\n",
    "            #mergeするために去年のも今年の名前にする\n",
    "            list_SpecifiedInvestmentEquitySharesPrior1YearSecond.append([str(fact.qname).replace('NumberOfSharesHeld', ''), fact.contextID.replace('Prior1Year', 'CurrentYear'), fact.value])\n",
    "    #ここからはデータフレームにまとめる    \n",
    "    #大株主\n",
    "    #議決権ベースでの大株主一覧が開示されていたらこれを優先する。\n",
    "    if dic_MajorShareholdersVotingRightsName:\n",
    "        dic_MajorShareholderName = dic_MajorShareholdersVotingRightsName\n",
    "        dic_MajorShareholderShares = dic_MajorShareholdersVotingRightsShares\n",
    "    df_MajorShareholderName = pd.DataFrame(dic_MajorShareholderName.items(), columns=['contextID', 'HOLDER_NAME'])\n",
    "    df_MajorShareholderShares = pd.DataFrame(dic_MajorShareholderShares.items(), columns=['contextID', 'SHARES'])\n",
    "    df_MajorShareholder = pd.merge(df_MajorShareholderName, df_MajorShareholderShares, on=['contextID'], how='outer').drop(['contextID'], axis=1)\n",
    "    df_MajorShareholder['DATA_KBN'] = ookabunusi\n",
    "    #自己株式\n",
    "    if list_TreasuryName:\n",
    "        df_TreasuryName = pd.DataFrame(list_TreasuryName, columns=['contextID', 'HOLDER_NAME'])\n",
    "        df_TreasuryShares = pd.DataFrame(list_TreasuryShares, columns=['contextID', 'SHARES'])\n",
    "        df_jikokabu = pd.merge(df_TreasuryName, df_TreasuryShares, on=['contextID'], how='left').drop(['contextID'], axis=1)\n",
    "        df_jikokabu['DATA_KBN'] = jikokabu\n",
    "        #自己株式等の欄はあるが全部NULLの場合があるので0株として処理する\n",
    "        if df_jikokabu['HOLDER_NAME'].iloc[0] =='':\n",
    "            df_jikokabu = pd.DataFrame([[jikokabu, '自己株式', TreasuryShares+TreasurySharesReciprocal]], columns=['DATA_KBN', 'HOLDER_NAME', 'SHARES'])\n",
    "    #自己株式の欄が無い場合は発行済み株式数。それもない場合は0\n",
    "    else:\n",
    "        df_jikokabu = pd.DataFrame([[jikokabu, '自己株式', TreasuryShares+TreasurySharesReciprocal]], columns=['DATA_KBN', 'HOLDER_NAME', 'SHARES'])\n",
    "    #役員\n",
    "    df_AuditorsName = pd.DataFrame(dic_AuditorsName.items(), columns=['contextID', 'HOLDER_NAME'])\n",
    "    df_AuditorsShares = pd.DataFrame(dic_AuditorsShares.items(), columns=['contextID', 'SHARES'])\n",
    "    df_Auditors = pd.merge(df_AuditorsName, df_AuditorsShares, on=['contextID'], how='left').drop(['contextID'], axis=1)\n",
    "    df_Auditors['DATA_KBN'] = yakuin\n",
    "    #政策保有株\n",
    "    if list_SpecifiedInvestmentEquityName:\n",
    "        df_SpecifiedInvestmentEquityName = pd.DataFrame(list_SpecifiedInvestmentEquityName, columns=['qname', 'contextID', 'HOLDER_NAME'])\n",
    "        df_SpecifiedInvestmentEquitySharesCurrentYear = pd.DataFrame(list_SpecifiedInvestmentEquitySharesCurrentYear, columns=['qname', 'contextID', 'SHARES'])\n",
    "        df_SpecifiedInvestmentEquitySharesPrior1Year = pd.DataFrame(list_SpecifiedInvestmentEquitySharesPrior1Year, columns=['qname', 'contextID', 'SHARES_PRIOR1YEAR'])\n",
    "        df_SpecifiedInvestmentEquity = pd.merge(df_SpecifiedInvestmentEquityName, df_SpecifiedInvestmentEquitySharesCurrentYear, on=['qname', 'contextID'], how='left')\n",
    "        df_SpecifiedInvestmentEquity = pd.merge(df_SpecifiedInvestmentEquity, df_SpecifiedInvestmentEquitySharesPrior1Year, on=['qname', 'contextID'], how='left').drop(['qname', 'contextID'], axis=1)\n",
    "    if list_SpecifiedInvestmentEquityNameLargest:\n",
    "        df_SpecifiedInvestmentEquityNameLargest = pd.DataFrame(list_SpecifiedInvestmentEquityNameLargest, columns=['qname', 'contextID', 'HOLDER_NAME'])\n",
    "        df_SpecifiedInvestmentEquitySharesCurrentYearLargest = pd.DataFrame(list_SpecifiedInvestmentEquitySharesCurrentYearLargest, columns=['qname', 'contextID', 'SHARES'])\n",
    "        df_SpecifiedInvestmentEquitySharesPrior1YearLargest = pd.DataFrame(list_SpecifiedInvestmentEquitySharesPrior1YearLargest, columns=['qname', 'contextID', 'SHARES_PRIOR1YEAR'])\n",
    "        df_SpecifiedInvestmentEquityLargest = pd.merge(df_SpecifiedInvestmentEquityNameLargest, df_SpecifiedInvestmentEquitySharesCurrentYearLargest, on=['qname', 'contextID'], how='left')\n",
    "        df_SpecifiedInvestmentEquityLargest = pd.merge(df_SpecifiedInvestmentEquityLargest, df_SpecifiedInvestmentEquitySharesPrior1YearLargest, on=['qname', 'contextID'], how='left').drop(['qname', 'contextID'], axis=1)\n",
    "        df_SpecifiedInvestmentEquityLargest['SUB_HOLDER_NAME'] = NameOfLargestCompany\n",
    "    if list_SpecifiedInvestmentEquityNameSecond:\n",
    "        df_SpecifiedInvestmentEquityNameSecond = pd.DataFrame(list_SpecifiedInvestmentEquityNameSecond, columns=['qname', 'contextID', 'HOLDER_NAME'])\n",
    "        df_SpecifiedInvestmentEquitySharesCurrentYearSecond = pd.DataFrame(list_SpecifiedInvestmentEquitySharesCurrentYearSecond, columns=['qname', 'contextID', 'SHARES'])\n",
    "        df_SpecifiedInvestmentEquitySharesPrior1YearSecond = pd.DataFrame(list_SpecifiedInvestmentEquitySharesPrior1YearSecond, columns=['qname', 'contextID', 'SHARES_PRIOR1YEAR'])\n",
    "        df_SpecifiedInvestmentEquitySecond = pd.merge(df_SpecifiedInvestmentEquityNameSecond, df_SpecifiedInvestmentEquitySharesCurrentYearSecond, on=['qname', 'contextID'], how='left')\n",
    "        df_SpecifiedInvestmentEquitySecond = pd.merge(df_SpecifiedInvestmentEquitySecond, df_SpecifiedInvestmentEquitySharesPrior1YearSecond, on=['qname', 'contextID'], how='left').drop(['qname', 'contextID'], axis=1)\n",
    "        df_SpecifiedInvestmentEquitySecond['SUB_HOLDER_NAME'] = NameOfSecondCompany\n",
    "    df_SpecifiedInvestmentEquity = pd.concat([df_SpecifiedInvestmentEquity, df_SpecifiedInvestmentEquityLargest, df_SpecifiedInvestmentEquitySecond])\n",
    "    df_SpecifiedInvestmentEquity['DATA_KBN'] = seisaku\n",
    "    #発行済み株式数\n",
    "    df_hakkouzumi = pd.DataFrame([[hakkouzumi, '発行済株式数', IssuedShares]], columns=['DATA_KBN', 'HOLDER_NAME', 'SHARES'])\n",
    "    #SHRES_PRIORR1YEAREが存在すればここで0にする\n",
    "    if 'SHARES_PRIOR1YEAR' in df_SpecifiedInvestmentEquity.columns:\n",
    "        df_SpecifiedInvestmentEquity['SHARES_PRIOR1YEAR'] = df_SpecifiedInvestmentEquity['SHARES_PRIOR1YEAR'].fillna(0)\n",
    "        df_SpecifiedInvestmentEquity['SHARES_PRIOR1YEAR'] = df_SpecifiedInvestmentEquity['SHARES_PRIOR1YEAR'].replace('', 0)\n",
    "    else:\n",
    "        df_SpecifiedInvestmentEquity['SHARES_PRIOR1YEAR'] = 0\n",
    "    df_result = pd.concat([df_MajorShareholder, df_jikokabu, df_Auditors, df_SpecifiedInvestmentEquity, df_hakkouzumi])\n",
    "    df_result['F_DATE'] = dic_values['FillingDate']\n",
    "    df_result['CODE'] = dic_values['Code']\n",
    "    df_result['NAME'] = dic_values['Name']\n",
    "    df_result['PERIOD'] = dic_values['Period']\n",
    "    #SHARESが0NULLの場合があるので0を振る\n",
    "    df_result['SHARES'] = df_result['SHARES'].fillna(0)\n",
    "    df_result['SHARES'] = df_result['SHARES'].replace('', 0)\n",
    "    #DB登録時に重複しないために連番を振る\n",
    "    df_result['RENBAN'] = df_result.groupby('DATA_KBN').cumcount()\n",
    "    #空白削除\n",
    "    df_result['NAME'] = df_result['NAME'].replace('\\s', '', regex=True)\n",
    "    df_result['HOLDER_NAME'] = df_result['HOLDER_NAME'].replace('\\s', '', regex=True)\n",
    "    df_result = df_result.astype({'SHARES':float, 'SHARES_PRIOR1YEAR':float, 'RENBAN':float})\n",
    "    if not('SUB_HOLDER_NAME' in df_SpecifiedInvestmentEquity.columns):\n",
    "        df_result['SUB_HOLDER_NAME'] = None\n",
    "    df_result = df_result[['RENBAN', 'PERIOD', 'F_DATE', 'CODE', 'NAME', 'DATA_KBN', 'HOLDER_NAME', 'SUB_HOLDER_NAME', 'SHARES', 'SHARES_PRIOR1YEAR']]\n",
    "    #DB登録\n",
    "    func_insert_excel(df_result, dic_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S100SWMF 61360\n",
      "S100SVA5 79650\n",
      "S100SX1Q 27340\n",
      "S100SX17 98720\n",
      "S100SXN6 32670\n",
      "S100SXSD 97200\n",
      "S100SXB2 32010\n",
      "S100SXVU 28300\n",
      "S100SXZJ 49920\n",
      "S100SXY6 31860\n",
      "S100SXGS 43610\n",
      "S100SXXC 66640\n",
      "S100SY5L 46160\n",
      "S100SY4C 93690\n",
      "S100SXUQ 29750\n",
      "S100SY5X 39070\n",
      "S100SY1F 52430\n",
      "S100SYAM 73600\n",
      "S100SY65 70740\n",
      "S100SXGY 60760\n",
      "S100SYKT 40160\n",
      "S100SY25 78790\n",
      "S100SY28 64740\n",
      "S100SYLH 55270\n",
      "S100SYO3 65580\n",
      "S100SXYN 59420\n",
      "S100SYOE 35470\n",
      "S100SY96 33770\n",
      "S100SYOA 95580\n",
      "S100SY79 72270\n",
      "S100SYCM 49950\n",
      "S100SYRV 31390\n",
      "S100SYT6 24930\n",
      "S100SYM7 62170\n",
      "S100SYTN 79970\n",
      "S100SYVT 41970\n",
      "S100SYK1 99720\n",
      "S100SYHH 93130\n",
      "S100SYTB 32440\n",
      "S100SYOB 75010\n",
      "S100SYEO 39940\n",
      "S100SYR6 97170\n",
      "S100SYXE 73880\n",
      "S100SYHG 89230\n",
      "S100SKO2 96470\n",
      "S100SYZH 32660\n",
      "S100SZ0L 92500\n",
      "S100SZ1T 30890\n",
      "S100SZ1K 46730\n",
      "S100SYKE 66340\n",
      "S100SYTP 53410\n",
      "S100SYSN 52460\n",
      "S100SYIG 34540\n",
      "S100SZ1N 80950\n",
      "S100SZ0P 70830\n",
      "S100SS7Q 41870\n",
      "S100SYRH 24710\n",
      "S100SZ6G 64920\n",
      "S100SYBO 28090\n",
      "S100SZ7X 68660\n",
      "S100SZ2R 98370\n",
      "S100SZ8N 43940\n",
      "S100SZAF 52500\n",
      "S100SZ69 40550\n",
      "S100SZBP 138A0\n",
      "S100SXZG 42500\n",
      "S100SZDA 92150\n"
     ]
    }
   ],
   "source": [
    "#zipを解凍するのに一回ダウンロードしないといけない\n",
    "list_error = []\n",
    "list_success = []\n",
    "for doc in list_docID:\n",
    "    path_xbrl = func_get_xbrl(doc)\n",
    "    func_parse_xbrl(path_xbrl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
