{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 調整係数予想　\n",
    "\n",
    "- 2 月末時点の TOPIX の算出対象の中から調整係数を乗じる銘柄を選定し4 月第 5 営業日に該当銘柄を公表4 月最終営業日に定期見直しを実施する。\n",
    "- なお、新規上場 又は市場区分の変更 等 によって、 3 月 1 日以降、翌年 2 月末までの間に TOPIX に追加された銘柄は、 4 月の定期見直しまでの間は、調整係数を乗じる銘柄として扱うこととする。 \n",
    "- 株式移転等による新規上場銘柄について、旧会社 2 社以上による場合は実質的な存続会社） が調整係数を乗じられている場合は、調整係数 を乗じる銘柄とする。\n",
    "- ここからは予想\n",
    "- 新たに調整係数が乗じられることは新規上場時のみで、定期見直しでは追加されない。\n",
    "- (3年前の3/1～2/28までの3年間の平均売買代金)/（2月末時点の調整係数適用前FFW*時価総額）が下位ｘ位（橋本さんによると調整係数の銘柄数も関係あるのでxは変化するらしい）以内に入っていなければ調整係数適用銘柄から除外される\n",
    "- テクニカル上場している銘柄は過去のその銘柄の売買代金も見ている"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 運用方法\n",
    "- 調整係数の管理は全てこのテーブルで行うため毎日朝更新する。\n",
    "- 調整係数の解除は4月のみだが、新規上場銘柄はその都度に調整係数がかかるか判定する必要がある\n",
    "- 9月までは東証発表の調整係数を使用し、10月以降はその時点の売買代金を元に予想した調整係数を使用する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "########################\n",
    "#何位以内に入れば調整係数が解除されるか\n",
    "kaijyo_rank = 1200\n",
    "#何年前までの売買代金の平均を見るか\n",
    "kaijyo_nen = 3\n",
    "#何月以降から予測値を使うか\n",
    "yoso_month = 10\n",
    "########################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_rows', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyodbc\n",
    "settings_pyodbc = {\"DRIVER\":\"{Oracle in OraClient12Home1}\", \n",
    "                    \"SERVER\":\"E03H.WORLD\", \n",
    "                    \"DBQ\":\"E03H\", \n",
    "                    \"UID\":\"DAZ91001\", \n",
    "                    \"PWD\":\"617030\"}\n",
    "#sqlの呼び出し関数\n",
    "def sql(query):\n",
    "    cnxn = pyodbc.connect(**settings_pyodbc)\n",
    "    return pd.read_sql(query, cnxn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "today = datetime.date.today().strftime('%Y%m%d')\n",
    "today_year = today[0:4]\n",
    "today_month = today[4:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#DBに登録されている直近のPDF\n",
    "def def_ffw_date_db():\n",
    "    query = '''\n",
    "SELECT\n",
    "    MAX(FFW_DATE)\n",
    "FROM\n",
    "    PTEUC.TOPIX_FFW_TYOUSEI_KEISU\n",
    "    '''\n",
    "    return sql(query).iloc[0,0]\n",
    "ffw_date_db = def_ffw_date_db()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#直近の調整係数定期見直しの基準以降の日（始まり）\n",
    "hantei_date_s = ffw_date_db[0:4] + '0301'\n",
    "#直近の調整係数定期見直しの基準以降の日（終わり） \n",
    "hantei_date_e = min(str(int(ffw_date_db[0:4])+1) + '0299' , today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sql_ffw_date_new():\n",
    "    query = f'''\n",
    "select\n",
    "    MAX(D_DATE)\n",
    "from\n",
    "    PT2.VWO_FN_CALENDAR\n",
    "where\n",
    "    D_DATE >= '{today}' and\n",
    "    SUBSTR(D_DATE, 5,2) = '04'\n",
    "GROUP BY\n",
    "    SUBSTR(D_DATE, 0,6)\n",
    "ORDER BY\n",
    "    SUBSTR(D_DATE, 0,6)\n",
    "    '''\n",
    "    return sql(query).iloc[0,0]\n",
    "#今日以降で調整係数の定期見直しが行われる最新の日\n",
    "ffw_date_new = sql_ffw_date_new()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#売買代金の基準は3年前\n",
    "#2月末以降に回す場合は、基準日を2月末にとどめる\n",
    "baibai_kijyun_date = str(int(ffw_date_db[0:4])-(kaijyo_nen-1)) + '0301'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 日付データ一覧を整理する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "直近の調整係数定期見直し日（DBに登録されている最新の日付）: 20230428\n",
      "直近の調整係数定期見直しの基準日以降（始まり）: 20230301\n",
      "直近の調整係数定期見直しの基準日以降（終わり）: 20240299\n",
      "次の調整係数定期見直し日： 20240430\n",
      "判定基準日の3年前までの売買基準日： 20210301\n"
     ]
    }
   ],
   "source": [
    "print('直近の調整係数定期見直し日（DBに登録されている最新の日付）:',ffw_date_db)\n",
    "print('直近の調整係数定期見直しの基準日以降（始まり）:', hantei_date_s)\n",
    "print('直近の調整係数定期見直しの基準日以降（終わり）:', hantei_date_e)\n",
    "print('次の調整係数定期見直し日：',ffw_date_new)\n",
    "print('判定基準日の3年前までの売買基準日：', baibai_kijyun_date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DBに登録されている東証発表の調整係数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sql_tyousei_db():\n",
    "    query = f'''\n",
    "SELECT\n",
    "    CODE,\n",
    "    TYOUSEI_KEISU as TYOUSEI_KEISU_OLD\n",
    "FROM\n",
    "    PTEUC.TOPIX_FFW_TYOUSEI_KEISU\n",
    "WHERE\n",
    "    FFW_DATE = '{ffw_date_db}'\n",
    "    '''\n",
    "    return sql(query)\n",
    "df_tyousei_db = sql_tyousei_db()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "set_tyousei_db = set(df_tyousei_db['CODE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "158"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set_tyousei_db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 東証発表のPDFには含まれていない判定が必要な新規上場銘柄\n",
    "# 3/1~翌2月末までに新規上場した銘柄(テクニカル上場を抜いた銘柄)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#テクニカル上場しており実質的な存続会社が調整係数がかかっていない場合は上場後も調整係数がかからない。\n",
    "#どちらかが調整係数がかかっていなかったら、そっちが存続会社のはずなのでどちらかに調整係数がかかっていなかったらテクニカル上場後も調整係数がかからないとする。\n",
    "#CODEが新規上場の銘柄コード、CODE_CHGが上場廃止となった旧銘柄コード\n",
    "def sql_technical_jojo():\n",
    "    query = f'''\n",
    "SELECT\n",
    "    P.CHG_DATE,\n",
    "    P.CODE,\n",
    "    Q.CODE_CHG\n",
    "FROM\n",
    "    (\n",
    "        SELECT\n",
    "            A.CHG_DATE,\n",
    "            A.CODE\n",
    "        FROM\n",
    "            PT2.V_MD_CHG_BASE_TOPIX A,\n",
    "            PT2.V_MD_CHG_BASE_TOPIX B\n",
    "        WHERE\n",
    "            A.CODE = B.CODE and\n",
    "            A.CHG_DATE = B.CHG_DATE and\n",
    "            A.EVENT_CODE = '00' and\n",
    "            B.EVENT_CODE = 'SK' and\n",
    "            B.SIZE2_NEW < = '7' and\n",
    "            A.CHG_DATE >= '{hantei_date_s}' \n",
    "    ) P\n",
    "LEFT OUTER JOIN\n",
    "    PT2.VWO_FN_ST_CAP_INC_MA Q ON\n",
    "    P.CODE = Q.CODE and\n",
    "    Q.EX_DATE >= '{hantei_date_s}' \n",
    "ORDER BY CODE\n",
    "    '''\n",
    "    return sql(query)\n",
    "df_technical_jojo = sql_technical_jojo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#旧会社に調整係数がかかっているかチェックするため\n",
    "df_technical_jojo1 = pd.merge(df_technical_jojo, df_tyousei_db, on=['CODE'], how='left')\n",
    "df_technical_jojo1.loc[pd.notnull(df_technical_jojo1['CODE_CHG']), 'TECHNICAL_FLG'] = 1\n",
    "df_technical_jojo1.loc[pd.notnull(df_technical_jojo1['TYOUSEI_KEISU_OLD']), 'TYOUSEI_FLG'] = 1\n",
    "df_technical_jojo2 = df_technical_jojo1.groupby(['CHG_DATE', 'CODE']).sum().reset_index()\n",
    "#新規上場時に調整係数がかかっている銘柄を抽出\n",
    "#テクニカル上場していないまたは旧会社も全て調整係数がかかっている銘柄\n",
    "df_sinki = df_technical_jojo2[(df_technical_jojo2['TECHNICAL_FLG']==0)|(df_technical_jojo2['TECHNICAL_FLG'] == df_technical_jojo2['TYOUSEI_FLG'])][['CHG_DATE', 'CODE']].copy()\n",
    "df_sinki['TYOUSEI_KEISU'] = 0.75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3/1までに上場した銘柄は売買代金での判定が入る\n",
    "df_sinki_hantei = df_sinki[df_sinki['CHG_DATE'] <= hantei_date_e]\n",
    "#反対に3/1以降の銘柄で調整係数がかかっている銘柄は翌年までかかったままとなる\n",
    "df_sinki_kakutei = df_sinki[df_sinki['CHG_DATE'] >= hantei_date_e]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "set_sinki_hantei = set(df_sinki_hantei['CODE'])\n",
    "set_sinki_kakutei = set(df_sinki_kakutei['CODE'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 現時点で調整係数がかかっている銘柄群"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#現在調整係数がかかっている銘柄＝東証のPDFに乗っている銘柄　＋　3/1以降2月末までに上場した銘柄 + 翌3月以降に新規上場した銘柄\n",
    "set_tyousei_now = set_tyousei_db | set_sinki_hantei | set_sinki_kakutei"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 直近3年間の平均売買金額"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#テクニカル上場している銘柄は旧会社の銘柄コードを現在の会社の銘柄コードに変換して平均を求める\n",
    "#2月末が基準なので3月に入ったら2月末までの値にする\n",
    "#CODE_CHGが古い上場廃止している銘柄コード、CODEが新しい銘柄コード\n",
    "def sql_baibai():\n",
    "    query = f'''\n",
    "SELECT\n",
    "    CODE,\n",
    "    AVG(AMT0) as AVG_BAIBAI\n",
    "FROM\n",
    "    (\n",
    "        SELECT\n",
    "            A.D_DATE,\n",
    "            CASE\n",
    "                WHEN B.CODE is NULL THEN A.CODE\n",
    "                ELSE B.CODE\n",
    "                END as CODE,\n",
    "            SUM(A.AMT0) as AMT0\n",
    "        FROM\n",
    "            PT2.V_TS_EQ_DLY_S A\n",
    "        LEFT OUTER JOIN\n",
    "            PT2.VWO_FN_ST_CAP_INC_MA B ON\n",
    "            A.CODE = B.CODE_CHG and \n",
    "            B.EX_DATE BETWEEN '{baibai_kijyun_date}' and '{hantei_date_e}'\n",
    "        WHERE\n",
    "            A.D_DATE BETWEEN '{baibai_kijyun_date}' and '{hantei_date_e}'\n",
    "        GROUP BY\n",
    "            A.D_DATE,\n",
    "            CASE\n",
    "                WHEN B.CODE is NULL THEN A.CODE\n",
    "                ELSE B.CODE\n",
    "                END\n",
    "    )\n",
    "GROUP BY\n",
    "    CODE\n",
    "    '''\n",
    "    return sql(query)\n",
    "df_baibai = sql_baibai()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 現在のTOPIX構成銘柄のTOPIX採用時価総額"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sql_kiso():\n",
    "    query = f'''\n",
    "SELECT\n",
    "    CODE,\n",
    "    MVAL_PV\n",
    "FROM\n",
    "    PT2.V_MD_EQ_BASE_TOPIX_S \n",
    "WHERE\n",
    "    D_DATE = '{today}' and \n",
    "    MVAL_PV <>0 and\n",
    "    SIZE2 <= 7\n",
    "    '''\n",
    "    return sql(query)\n",
    "df_kiso = sql_kiso()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_jika = pd.merge(df_kiso, df_baibai, on=['CODE'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#基準となる時価総額は調整係数適用前なので現在の調整係数適応銘柄のリストから割り戻す\n",
    "df_tyousei_now = pd.DataFrame(set_tyousei_now, columns=['CODE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tyousei_now['TYOUSEI_KEISU'] = 0.75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_jika1 = pd.merge(df_jika, df_tyousei_now, on='CODE', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_jika1['TYOUSEI_KEISU'] = df_jika1['TYOUSEI_KEISU'].fillna(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_jika1['JIKASOUGAKU'] = df_jika1['MVAL_PV']  / df_jika1['TYOUSEI_KEISU'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_jika1['RATIO'] = df_jika1['AVG_BAIBAI'] / df_jika1['JIKASOUGAKU']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_jika2 = df_jika1.sort_values('RATIO')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_jika2['RENBAN'] =  range(1, len(df_jika2.index) + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_jika2.to_excel(r\"S:\\B910\\商品一課\\TOPIXFFW予想\\調整係数移行係数\\流動性ランキング_{}.xlsx\".format(today))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#売買代金/時価総額が基準以上のランク＝解除される銘柄\n",
    "set_kaijyo = set(df_jika2[df_jika2['RENBAN'] > kaijyo_rank]['CODE'])\n",
    "set_not_kaijyo = set(df_jika2[df_jika2['RENBAN'] <= kaijyo_rank]['CODE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#調整係数が解除される銘柄の予想\n",
    "#すでに調整係数が適用されている銘柄　-　調整係数を解除できる銘柄群\n",
    "len(set_tyousei_now & set_kaijyo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#引き続き調整係数適用となる銘柄\n",
    "#判定が必要な銘柄から解除できる銘柄を除き確定している3/1以降の調整係数を加える\n",
    "set_tyousei_yoso =  ((set_tyousei_db | set_sinki_hantei) - set_kaijyo) | set_sinki_kakutei"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# RYUDOUSEI_KEISU_OLD 今日時点で調整係数がかかっている銘柄\n",
    "df_tyousei_old = pd.DataFrame(set_tyousei_now, columns=['CODE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tyousei_old['TYOUSEI_KEISU_OLD'] = 0.75"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RYUDOUSEI_KEISU_NEW 10月以降は予測値を、それ以前は確定値を入れる"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#DBに登録されている定期見直し日の年の10月以降から予測する\n",
    "#予想するか現時点のを使うか\n",
    "\n",
    "yoso_start_date = ffw_date_db[0:4] + str(yoso_month) + '01'\n",
    "#予想する\n",
    "if today>=yoso_start_date:\n",
    "    df_tyousei_new = pd.DataFrame(set_tyousei_yoso, columns=['CODE'])\n",
    "    ffw_date_insert = ffw_date_new\n",
    "else:\n",
    "    df_tyoussei_new = pd.DataFrame(set_tyousei_now, columns=['CODE'])\n",
    "    ffw_date_insert = ffw_date_db\n",
    "df_tyousei_new['TYOUSEI_KEISU_NEW'] = 0.75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_insert = pd.merge(df_tyousei_old, df_tyousei_new, on='CODE', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_insert = df_insert.fillna(1)\n",
    "df_insert['FFW_DATE'] = ffw_date_insert\n",
    "df_insert['D_DATE'] = today"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DB挿入"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "insert_table = 'PTEUC.TOPIX_FFW_TYOUSEI_KEISU_ESTIMATE'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_exist_ryudousei(insert_table):\n",
    "    query = f'''\n",
    "SELECT\n",
    "    COUNT(*)\n",
    "FROM\n",
    "    {insert_table}\n",
    "WHERE\n",
    "    D_DATE = '{today}' \n",
    "    '''\n",
    "    return sql(query).iloc[0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Insert_DB(insert_table, df):\n",
    "        keys = ','.join(list(df.columns))\n",
    "        with pyodbc.connect(DRIVER=\"{Oracle in OraClient12Home1}\", \n",
    "                              SERVER=\"E03H.WORLD\", \n",
    "                              DBQ=\"E03H\", \n",
    "                              UID=\"DAZ91001\", \n",
    "                              PWD=\"617030\") as cnxn:\n",
    "            with cnxn.cursor() as cursor:\n",
    "                #当日が既に登録されていたら削除\n",
    "                if is_exist_ryudousei(insert_table):\n",
    "                    delete_sql = f'''\n",
    "                    DELETE\n",
    "                    FROM {insert_table}\n",
    "                    WHERE D_DATE = '{today}' \n",
    "                    '''\n",
    "                    cursor.execute(delete_sql)\n",
    "                #ここからDB登録\n",
    "                for row in df.values:\n",
    "                    values = ''\n",
    "                    for cell in row:\n",
    "                        if type(cell) is str:\n",
    "                            values += f\"'{cell}',\"\n",
    "                        elif pd.isna(cell) or (cell is None):\n",
    "                            values += 'NULL,'\n",
    "                        else:\n",
    "                            values += f\"{cell},\"\n",
    "                    #最後のカンマを消す\n",
    "                    values = values[0:-1]\n",
    "                    \n",
    "                    insert_sql = f'insert into {insert_table} ({keys}) VALUES ({values})'\n",
    "                    # sql実行\n",
    "                    cursor.execute(insert_sql)\n",
    "                    cursor.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "Insert_DB(insert_table, df_insert)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
